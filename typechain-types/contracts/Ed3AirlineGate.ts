/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../common";

export interface Ed3AirlineGateInterface extends utils.Interface {
  functions: {
    "POINTS_PER_TICKET()": FunctionFragment;
    "ed3LoyaltyPointsAddress()": FunctionFragment;
    "ed3TicketNFTAddress()": FunctionFragment;
    "mint(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "POINTS_PER_TICKET" | "ed3LoyaltyPointsAddress" | "ed3TicketNFTAddress" | "mint",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "POINTS_PER_TICKET", values?: undefined): string;
  encodeFunctionData(functionFragment: "ed3LoyaltyPointsAddress", values?: undefined): string;
  encodeFunctionData(functionFragment: "ed3TicketNFTAddress", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "POINTS_PER_TICKET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ed3LoyaltyPointsAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ed3TicketNFTAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {};
}

export interface Ed3AirlineGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Ed3AirlineGateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    POINTS_PER_TICKET(overrides?: CallOverrides): Promise<[BigNumber]>;

    ed3LoyaltyPointsAddress(overrides?: CallOverrides): Promise<[string]>;

    ed3TicketNFTAddress(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  POINTS_PER_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

  ed3LoyaltyPointsAddress(overrides?: CallOverrides): Promise<string>;

  ed3TicketNFTAddress(overrides?: CallOverrides): Promise<string>;

  mint(
    _to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    POINTS_PER_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

    ed3LoyaltyPointsAddress(overrides?: CallOverrides): Promise<string>;

    ed3TicketNFTAddress(overrides?: CallOverrides): Promise<string>;

    mint(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    POINTS_PER_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

    ed3LoyaltyPointsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    ed3TicketNFTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POINTS_PER_TICKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ed3LoyaltyPointsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ed3TicketNFTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
