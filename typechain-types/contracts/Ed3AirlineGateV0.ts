/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../common";

export interface Ed3AirlineGateV0Interface extends utils.Interface {
  functions: {
    "ONE_TICKET()": FunctionFragment;
    "POINTS_PER_TICKET()": FunctionFragment;
    "ed3LoyaltyPoints()": FunctionFragment;
    "mint(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "ticketLeft()": FunctionFragment;
    "ticketPrice()": FunctionFragment;
    "ticketTotalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userTickets(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ONE_TICKET"
      | "POINTS_PER_TICKET"
      | "ed3LoyaltyPoints"
      | "mint"
      | "owner"
      | "renounceOwnership"
      | "ticketLeft"
      | "ticketPrice"
      | "ticketTotalSupply"
      | "transferOwnership"
      | "userTickets"
      | "withdraw",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ONE_TICKET", values?: undefined): string;
  encodeFunctionData(functionFragment: "POINTS_PER_TICKET", values?: undefined): string;
  encodeFunctionData(functionFragment: "ed3LoyaltyPoints", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "ticketLeft", values?: undefined): string;
  encodeFunctionData(functionFragment: "ticketPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "ticketTotalSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "userTickets", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ONE_TICKET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "POINTS_PER_TICKET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ed3LoyaltyPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticketLeft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticketPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticketTotalSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userTickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface Ed3AirlineGateV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Ed3AirlineGateV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ONE_TICKET(overrides?: CallOverrides): Promise<[BigNumber]>;

    POINTS_PER_TICKET(overrides?: CallOverrides): Promise<[BigNumber]>;

    ed3LoyaltyPoints(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    ticketLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userTickets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  ONE_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

  POINTS_PER_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

  ed3LoyaltyPoints(overrides?: CallOverrides): Promise<string>;

  mint(
    _to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  ticketLeft(overrides?: CallOverrides): Promise<BigNumber>;

  ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  ticketTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userTickets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    ONE_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

    POINTS_PER_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

    ed3LoyaltyPoints(overrides?: CallOverrides): Promise<string>;

    mint(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    ticketLeft(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    ticketTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    userTickets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ONE_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

    POINTS_PER_TICKET(overrides?: CallOverrides): Promise<BigNumber>;

    ed3LoyaltyPoints(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    ticketLeft(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    ticketTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userTickets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE_TICKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POINTS_PER_TICKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ed3LoyaltyPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    ticketLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userTickets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
